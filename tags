!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AR	Makefile	/^AR			:= ar rcs$/;"	m
AR	libft/Makefile	/^AR			:= ar rcs$/;"	m
BONUSOBJ	Makefile	/^BONUSOBJ	:= $(BONUSSRC:.c=.o)$/;"	m
BONUSOBJ	libft/Makefile	/^BONUSOBJ	:= $(BONUSSRC:.c=.o)$/;"	m
BONUSSRC	Makefile	/^BONUSSRC		:=.\/ft_lstadd_back_bonus.c\\$/;"	m
BONUSSRC	libft/Makefile	/^BONUSSRC		:=.\/ft_lstadd_back_bonus.c\\$/;"	m
CC	Makefile	/^CC			:= gcc$/;"	m
CC	libft/Makefile	/^CC			:= gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS		:= $(CFLAGS) -I$(INC)$/;"	m
CFLAGS	Makefile	/^CFLAGS		:= -Werror -Wextra -Wall -Wparentheses$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS		:= $(CFLAGS) -I$(INC)$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS		:= -Werror -Wextra -Wall -Wparentheses$/;"	m
COBJ	Makefile	/^COBJ		:= $(CSRC:.c=.o)$/;"	m
COBJ	libft/Makefile	/^COBJ		:= $(CSRC:.c=.o)$/;"	m
CSRC	Makefile	/^CSRC			:=.\/ft_strnstr.c\\$/;"	m
CSRC	libft/Makefile	/^CSRC			:=.\/ft_strnstr.c\\$/;"	m
DEBUG	Makefile	/^DEBUG		:= 0$/;"	m
DEBUG	libft/Makefile	/^DEBUG		:= 0$/;"	m
DEBUGFLAGS	Makefile	/^DEBUGFLAGS	:= -g -fsanitize=address -fno-omit-frame-pointer$/;"	m
DEBUGFLAGS	libft/Makefile	/^DEBUGFLAGS	:= -g -fsanitize=address -fno-omit-frame-pointer$/;"	m
FALSE	libft/libft.h	/^#  define FALSE /;"	d
INC	Makefile	/^INC			:= .\/$/;"	m
INC	libft/Makefile	/^INC			:= .\/$/;"	m
LIBFTPRINTF_H	libftprintf.h	/^# define LIBFTPRINTF_H$/;"	d
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
NAME	Makefile	/^NAME		:= libft.a$/;"	m
NAME	libft/Makefile	/^NAME		:= libft.a$/;"	m
RM	Makefile	/^RM			:= rm -rf$/;"	m
RM	libft/Makefile	/^RM			:= rm -rf$/;"	m
TRUE	libft/libft.h	/^#  define TRUE /;"	d
content	libft/libft.h	/^	void				*content;$/;"	m	struct:s_list
e_bool	libft/libft.h	/^typedef enum			e_bool$/;"	g
ft_atoi	libft/ft_atoi.c	/^int				ft_atoi(const char *str)$/;"	f
ft_bytes_digits	libft/ft_bytes_digits.c	/^unsigned int		ft_bytes_digits(size_t bytes)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void		ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void			*ft_calloc(size_t nmemb, size_t size)$/;"	f
ft_count_occ	libft/ft_count_occ.c	/^unsigned int		ft_count_occ(const char *s, char c)$/;"	f
ft_free_until	libft/ft_free_until.c	/^void			ft_free_until(void **array, void *end)$/;"	f
ft_is_char_in	libft/ft_is_char_in.c	/^t_bool				ft_is_char_in(char c, char const *str)$/;"	f
ft_isalnum	libft/ft_isalnum.c	/^int			ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int			ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int				ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int			ft_isdigit(int c)$/;"	f
ft_islower	libft/ft_islower.c	/^int			ft_islower(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int				ft_isprint(int c)$/;"	f
ft_isspace	libft/ft_isspace.c	/^int		ft_isspace(int c)$/;"	f
ft_isupper	libft/ft_isupper.c	/^int				ft_isupper(int c)$/;"	f
ft_itoa	libft/ft_itoa.c	/^char				*ft_itoa(int n)$/;"	f
ft_lstadd_back	libft/ft_lstadd_back_bonus.c	/^void		ft_lstadd_back(t_list **alst, t_list *new)$/;"	f
ft_lstadd_front	libft/ft_lstadd_front_bonus.c	/^void	ft_lstadd_front(t_list **alst, t_list *new)$/;"	f
ft_lstclear	libft/ft_lstclear_bonus.c	/^void		ft_lstclear(t_list **lst, void (*del)(void*))$/;"	f
ft_lstdelone	libft/ft_lstdelone_bonus.c	/^void		ft_lstdelone(t_list *lst, void (*del)(void*))$/;"	f
ft_lstiter	libft/ft_lstiter_bonus.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	libft/ft_lstlast_bonus.c	/^t_list		*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	libft/ft_lstmap_bonus.c	/^t_list		*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	libft/ft_lstnew_bonus.c	/^t_list		*ft_lstnew(void *content)$/;"	f
ft_lstsize	libft/ft_lstsize_bonus.c	/^int			ft_lstsize(t_list *lst)$/;"	f
ft_malloc_split	libft/ft_split.c	/^static char			**ft_malloc_split(char const *s, char d, unsigned int *ui,$/;"	f	file:
ft_memccpy	libft/ft_memccpy.c	/^void			*ft_memccpy(void *dest, const void *src, int c, size_t n)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void				*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int					ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void						*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void				*ft_memmove(void *dst, const void *src, size_t n)$/;"	f
ft_memset	libft/ft_memset.c	/^void				*ft_memset(void *s, int c, size_t len)$/;"	f
ft_numlen	libft/ft_numlen.c	/^unsigned short			ft_numlen(int n)$/;"	f
ft_putchar	libft/ft_putchar.c	/^void		ft_putchar(char c)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void		ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl	libft/ft_putendl.c	/^void		ft_putendl(char *s)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void		ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr	libft/ft_putnbr.c	/^void	ft_putnbr(int n)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void		ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr	libft/ft_putstr.c	/^void		ft_putstr(char *s)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void		ft_putstr_fd(char *s, int fd)$/;"	f
ft_read	libft/ft_read.c	/^char		*ft_read(char delimiter)$/;"	f
ft_read_fd	libft/ft_read_fd.c	/^char				*ft_read_fd(char delimiter, int fd)$/;"	f
ft_realloc	libft/ft_realloc.c	/^void		*ft_realloc(void *ptr, size_t size)$/;"	f
ft_split	libft/ft_split.c	/^char				**ft_split(char const *s, char d)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char			*ft_strchr(const char *s, int c)$/;"	f
ft_strcpy	libft/ft_strcpy.c	/^char				*ft_strcpy(char *dst, const char *src)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char		*ft_strdup(const char *src)$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char				*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t			ft_strlcat(char *dst, const	char *src, size_t dstsize)$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^size_t				ft_strlcpy(char *dest, const char *src, size_t len)$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t		ft_strlen(const char *s)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char				*ft_strmapi(const char *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int				ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnlen	libft/ft_strnlen.c	/^size_t		ft_strnlen(const char *s, size_t maxlen)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char		*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char			*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char		*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_strtrim_begin	libft/ft_strtrim_begin.c	/^char				*ft_strtrim_begin(char const *s1, char const *set)$/;"	f
ft_strtrim_end	libft/ft_strtrim_end.c	/^char		*ft_strtrim_end(char const *s1, char const *set)$/;"	f
ft_substr	libft/ft_substr.c	/^char				*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int			ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int			ft_toupper(int c)$/;"	f
g_false	libft/libft.h	/^{g_false, g_true}		t_bool;$/;"	e	enum:e_bool
g_true	libft/libft.h	/^{g_false, g_true}		t_bool;$/;"	e	enum:e_bool
i	libft/libft.h	/^	unsigned int		i;$/;"	m	struct:s_split_state
nb_words	libft/libft.h	/^	unsigned int		nb_words;$/;"	m	struct:s_split_state
next	libft/libft.h	/^	struct s_list		*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
out	libft/libft.h	/^	char				**out;$/;"	m	struct:s_split_state
s_len	libft/libft.h	/^	unsigned int		s_len;$/;"	m	struct:s_split_state
s_list	libft/libft.h	/^typedef struct			s_list$/;"	s
s_split_state	libft/libft.h	/^typedef struct			s_split_state$/;"	s
t_bool	libft/libft.h	/^{g_false, g_true}		t_bool;$/;"	t	typeref:enum:e_bool
t_list	libft/libft.h	/^}						t_list;$/;"	t	typeref:struct:s_list
t_split_state	libft/libft.h	/^}						t_split_state;$/;"	t	typeref:struct:s_split_state
tmp	libft/libft.h	/^	char				*tmp;$/;"	m	struct:s_split_state
y	libft/libft.h	/^	unsigned int		y;$/;"	m	struct:s_split_state
